@model TESTFRAMEWORK.Models.ResearcherViewModel

@{
    ViewBag.Title = "แก้ไขข้อมูลนักวิจัย";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="mb-4">แก้ไขข้อมูลนักวิจัย</h2>

@using (Html.BeginForm("EditInternal", "Researcher", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="container-xxl flex-grow-1 container-p-y mt-xl-5 card p-4">
        <h4 class="mb-3">ข้อมูลนักวิจัย</h4>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <!-- ✅ ข้อมูลพื้นฐาน -->
    <div class="row">
        <div class="col-md-4">
            <div class="form-group mb-3">
                @Html.Label("รหัสผู้วิจัย", new { @class = "font-weight-bold" })
                @Html.TextBoxFor(m => m.ResearcherNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.ResearcherNumber, "", new { @class = "text-danger", })
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-group mb-3">
                @Html.Label("คำนำหน้า", new { @class = "font-weight-bold" })
                @Html.DropDownListFor(
                         m => m.Title,
                         (SelectList)ViewBag.TitleList, // ใช้ ViewBag.TitleList จาก Controller
                         "-- เลือกคำนำหน้า --",       // ข้อความเริ่มต้นหากไม่มีค่า
                         new { @class = "form-control" } // HTML attributes
                     )
                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group mb-3">
                @Html.Label("ชื่อ", new { @class = "font-weight-bold" })
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

        <div id="internal-fields">
            <div class="row">

                <!-- ✅ ข้อมูลหน่วยงาน / บริษัท -->
                <div id="internal-fields" class="row g-3 mb-4">
                    <div class="col-md-6">
                         
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group mb-3">
                        @Html.Label("ประเภทวิจัย", new { @class = "font-weight-bold" })
                        @Html.DropDownListFor(m => m.TypeResearchId,
                            ViewBag.TypeResearchList as SelectList,
                            "-- เลือกประเภทวิจัย --",
                            new { @class = "form-control", id = "typeResearchDropdown" })
                    </div>
                </div>
            </div>
        </div>

        <!-- ✅ บุคคลภายนอก: ข้อมูลเพิ่มเติม -->
        <div id="external-fields" style="display: none;">
            <div class="form-group mb-3">
                @Html.Label("หน่วยงาน / บริษัท", new { @class = "font-weight-bold" })
                @Html.TextBoxFor(m => m.OtherInfo, new { @class = "form-control" })
            </div>
        </div>

        <div class="d-flex align-items-center justify-content-center mt-4">
            <button type="submit" class="btn btn-success px-4 me-3">
                <i class="fas fa-save"></i> บันทึกข้อมูล
            </button>
            <a href="@Url.Action("Index")" class="btn btn-secondary px-4">ยกเลิก</a>
        </div>
    </div>
}

@section scripts {
    <script>
        $(document).ready(function () {
            function toggleFields() {
                var selectedUserType = $("input[name='UserType']:checked").val();

                if (selectedUserType === "บุคคลภายใน") {
                    $("#internal-fields").show();
                    $("#external-fields").hide();
                }
                else if (selectedUserType === "บุคคลภายนอก") {
                    $("#external-fields").show();
                    $("#internal-fields").hide();
                }
            }

            // ✅ เปลี่ยน UI เมื่อเลือกประเภท
            $(".user-type").change(function () {
                toggleFields();
            });

            // ✅ เรียกใช้เมื่อลูกค้าเปิดหน้าเว็บ
            toggleFields();
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
       $(document).ready(function () {
    // ✅ เมื่อเลือก "กลุ่มงาน" → โหลด "ฝ่ายงาน"
    $("#workGroupDropdown").change(function () {
        var workGroupId = $(this).val();
        $("#departmentDropdown").html('<option value="">-- เลือกฝ่ายงาน --</option>');
        $("#divisionDropdown").html('<option value="">-- เลือกแผนก --</option>');

        if (!workGroupId) return;

        $.get("@Url.Action("GetDepartmentsByWorkGroup", "Researcher")", { workGroupId: workGroupId })
            .done(function (data) {
                $.each(data, function (index, item) {
                    $("#departmentDropdown").append($('<option></option>').val(item.Value).text(item.Text));
                });
            })
            .fail(function () {
                console.error("ไม่สามารถโหลดข้อมูลฝ่ายงานได้");
            });
    });

    // ✅ เมื่อเลือก "ฝ่ายงาน" → โหลด "แผนก"
    $("#departmentDropdown").change(function () {
        var departmentId = $(this).val();
        $("#divisionDropdown").html('<option value="">-- เลือกแผนก --</option>');

        if (!departmentId) return;

        $.get("@Url.Action("GetDivisionsByDepartment", "Researcher")", { departmentId: departmentId })
            .done(function (data) {
                $.each(data, function (index, item) {
                    $("#divisionDropdown").append($('<option></option>').val(item.Value).text(item.Text));
                });
            })
            .fail(function () {
                console.error("ไม่สามารถโหลดข้อมูลแผนกได้");
            });
    });

    // ✅ ตั้งค่า Dropdown Lists ให้แสดงค่าที่เลือกไว้
    $("#workGroupDropdown").trigger("change"); // โหลดฝ่ายงานและแผนกเมื่อหน้าโหลดเสร็จ
});

            // ✅ เมื่อเลือก "ฝ่ายงาน" → โหลด "แผนก"
            $("#departmentDropdown").change(function () {
                var departmentId = $(this).val();
                $("#divisionDropdown").html('<option value="">-- เลือกแผนก --</option>');

                if (!departmentId) return;

                $.get("@Url.Action("GetDivisionsByDepartment", "Researcher")", { departmentId: departmentId })
                    .done(function (data) {
                        $.each(data, function (index, item) {
                            $("#divisionDropdown").append($('<option></option>').val(item.Value).text(item.Text));
                        });
                    })
                    .fail(function () {
                        console.error("ไม่สามารถโหลดข้อมูลแผนกได้");
                    });
            });
        });
    </script>
}
