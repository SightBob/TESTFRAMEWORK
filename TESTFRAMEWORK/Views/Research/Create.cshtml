@model TESTFRAMEWORK.Models.ResearchProjectViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- โหลด CSS ของ Select2 (ในที่นี้ใส่ไว้ในหน้าเลย) -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

<style>

    .select2-container .select2-selection--single,
    .select2-container--default .select2-selection--single .select2-selection__rendered,
    .select2-container--default .select2-selection--single .select2-selection__placeholder {
        height: 39px !important;
    }

    .select2-container .select2-selection--single {
        padding-top: .25rem;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 38px !important;
    }

    .mt-max-lg-3 {
        margin-top: 5rem !important;
    }

    @@media screen and (max-width: 1024px) {
        .mt-max-lg-3 {
            margin-top: 1rem !important;
            max-width: 95%;
        }
    }

    .custom-add-btn {
        background-color: #F26522 !important;
        color: #fff !important;
    }
    .btn-check:focus + .btn-primary, .btn-primary:focus, .btn-primary.focus {
        background-color: #F26522 !important;
        color: #fff !important;
        
    }
</style>

@using (Html.BeginForm("Create", "Research", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="container-xxl flex-grow-1 container-p-y mt-xl-5 card mt-max-lg-3">
        <h4 class="mb-3">รายละเอียดโครงการ</h4>

        @*@Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })*@

        <div class="row">
            <div class="col-md-4">
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.ResearchProject.FiscalYear, "วันตอบรับเข้าเก็บข้อมูล", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(model => model.ResearchProject.FiscalYear, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "RequestDate", required = "required" })
                    @Html.ValidationMessageFor(model => model.ResearchProject.FiscalYear, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.ResearchProject.ProjectCode, "รหัสโครงการ", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(m => m.ResearchProject.ProjectCode, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.ResearchProject.ProjectCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.ResearchProject.sut_hospital_grant_code, "รหัสสัญญาทุนวิจัย รพ. มทส.", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(m => m.ResearchProject.sut_hospital_grant_code, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ResearchProject.sut_hospital_grant_code, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.ResearchProject.ProjectName, "ชื่อโครงการ", new { @class = "font-weight-bold" })
                    @Html.EditorFor(model => model.ResearchProject.ProjectName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.ResearchProject.ProjectName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <!-- ประเภท EC -->
            <div class="col-md-12">
                <div class="form-group mb-3">
                    @Html.Label("ประเภท EC", new { @class = "font-weight-bold" })
                    @Html.DropDownListFor(m => m.ResearchProject.TypeECID, ViewBag.TypeECList as SelectList, "-- เลือกประเภท EC --", new { @class = "form-control type_ec" })
                </div>
            </div>

            <!-- หัวหน้าโครงการ (ใช้ Select2) -->
            <div class="col-md-3">
                @Html.Label("หัวหน้าโครงการ", new { @class = "font-weight-bold" })
                @Html.DropDownListFor(m => m.ResearchProject.HeadResearcherId,
                           ViewBag.HeadResearcherList as SelectList,
                           "-- เลือกหัวหน้าโครงการ --",
                           new { @class = "js-example-basic-single form-control headResearcher" })
                @Html.ValidationMessageFor(m => m.ResearchProject.HeadResearcherId, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-3">
                <div class="form-group mb-3">
                    @Html.Label("สำนักวิชา / หน่วยงาน", new { @class = "font-weight-bold" })
                    <input type="text" id="headWorkGroup" class="form-control" disabled>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group mb-3">
                    @Html.Label("แผนก", new { @class = "font-weight-bold" })
                    <input type="text" id="headDepartment" class="form-control" disabled>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group mb-3">
                    @Html.Label("ประเภทผู้วิจัย", new { @class = "font-weight-bold" })
                    <input type="text" id="headDivition" class="form-control" disabled>
                </div>
            </div>

        </div>

        <hr class="my-4" />
        <h4 class="mb-3">👥 ผู้วิจัยร่วม</h4>

        <div class="table-responsive">
            <table class="table table-bordered" id="assistantTable">
                <thead class="table-primary text-center">
                    <tr>
                        <th style="width: 400px;">รหัสและชื่อผู้วิจัยร่วม</th>
                        <th>
                            สำนักวิชา /หน่วยงาน
                        </th>
                        <th>
                            แผนก
                        </th>
                        <th>ประเภทผู้วิจัยร่วม</th>
                        <th>ลบ</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <button type="button" class="btn custom-add-btn mt-2" onclick="addAssistant()">+ เพิ่มผู้วิจัยร่วม</button>

        <div class="row mt-4">
            <div class="col-md-12">
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.ResearchProject.ECApprovalCode, "รหัส EC", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(model => model.ResearchProject.ECApprovalCode, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.ResearchProject.ECApprovalCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.ResearchProject.ECApprovalDate, "วันที่อนุมัติ EC", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(model => model.ResearchProject.ECApprovalDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "RequestDate", required = "required" })
                    @Html.ValidationMessageFor(model => model.ResearchProject.ECApprovalDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ResearchProject.ECExpirationDate, "วันหมดอายุ EC", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(model => model.ResearchProject.ECExpirationDate, "{0:yyyy-MM-dd}", new { @class = "form-control date_ec", id = "RequestDate", type = "date" })
                    @Html.ValidationMessageFor(model => model.ResearchProject.ECExpirationDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ResearchProject.ResearchApprovalDate, "วันที่อนุมัติ (ขอเข้าเก็บข้อมูล)", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(model => model.ResearchProject.ResearchApprovalDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "RequestDate", required = "required"  })
                    @Html.ValidationMessageFor(model => model.ResearchProject.ResearchApprovalDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ResearchProject.ResearchExpirationDate, "วันหมดอายุ (ขอเข้าเก็บข้อมูล)", new { @class = "font-weight-bold" })
                    @Html.TextBoxFor(model => model.ResearchProject.ResearchExpirationDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "RequestDate", required = "required" })
                    @Html.ValidationMessageFor(model => model.ResearchProject.ResearchExpirationDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ResearchProject.Note, "หมายเหตุ", new { @class = "font-weight-bold" })
                    @Html.TextAreaFor(model => model.ResearchProject.Note, new { @class = "form-control", rows = 4 })
                    @Html.ValidationMessageFor(model => model.ResearchProject.Note, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <hr class="my-4" />
        <h4 class="mb-3">📎 ไฟล์แนบ</h4>
        <div class="form-group mt-4">
            <label class="font-weight-bold">อัปโหลดไฟล์ใหม่ (เลือกหลายไฟล์ได้)</label>
            <input type="file" name="files" multiple class="form-control" />
        </div>

        <div class="d-flex align-items-center justify-content-center mt-4">
            <button type="submit" id="saveBtn" class="btn btn-success px-4 me-3">
                <i class="fas fa-save"></i> บันทึกข้อมูล
            </button>
            <a href="@Url.Action("Index")" class="btn btn-secondary px-4">ยกเลิก</a>
        </div>
    </div>
}


@section scripts {
    <!-- โหลด JS ของ jQuery และ Select2 จาก _Layout.cshtml (หรือที่อื่น) ให้เรียบร้อยก่อนโค้ดนี้ -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@4.0.0/dist/jquery.validate.unobtrusive.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/th.js"></script>

    <script>
        // Form validation
        $(document).ready(function () {
            $.validator.addMethod("requiredSelect2", function (value, element) {
                return value !== "" && value !== null;
            }, "กรุณาเลือกข้อมูลในฟิลด์นี้");

            $.validator.addMethod("dateCheck", function (value, element, param) {
                if (!value || !$(param).val()) return true;
                return new Date(value) >= new Date($(param).val());
            }, "วันที่หมดอายุต้องมากกว่าหรือเท่ากับวันที่อนุมัติ");

            // Add validation rules
            $("form").validate({
                errorElement: "div",
                errorClass: "text-danger",
                highlight: function (element) {
                    $(element).addClass("is-invalid").removeClass("is-valid");
                },
                unhighlight: function (element) {
                    $(element).addClass("is-valid").removeClass("is-invalid");
                },
                rules: {
                    "ResearchProject.ProjectName": {
                        required: true,
                        minlength: 5
                    },
                    "ResearchProject.ProjectCode": {
                        required: true
                    },
                    "ResearchProject.TypeECID": {
                        required: true
                    },
                    "ResearchProject.HeadResearcherId": {
                        requiredSelect2: true
                    },
                    "ResearchProject.FiscalYear": {
                        required: true
                    },
                    "ResearchProject.ECApprovalCode": {
                        required: true
                    },
                    "ResearchProject.ECApprovalDate": {
                        required: true
                    },
                    "ResearchProject.ECExpirationDate": {
                        required: function() {
                            return $("#ResearchProject_TypeECID").val() != "1";
                        },
                        dateCheck: "#ResearchProject_ECApprovalDate"
                    },
                    "ResearchProject.ResearchApprovalDate": {
                        required: true
                    },
                    "ResearchProject.ResearchExpirationDate": {
                        required: true,
                        dateCheck: "#ResearchProject_ResearchApprovalDate"
                    }
                },
                messages: {
                    "ResearchProject.ProjectName": {
                        required: "กรุณาระบุชื่อโครงการ",
                        minlength: "ชื่อโครงการต้องมีความยาวอย่างน้อย 5 ตัวอักษร"
                    },
                    "ResearchProject.ProjectCode": {
                        required: "กรุณาระบุรหัสโครงการ"
                    },
                    "ResearchProject.TypeECID": {
                        required: "กรุณาเลือกประเภท EC"
                    },
                    "ResearchProject.HeadResearcherId": {
                        requiredSelect2: "กรุณาเลือกหัวหน้าโครงการ"
                    },
                    "ResearchProject.FiscalYear": {
                        required: "กรุณาระบุวันตอบรับเข้าเก็บข้อมูล"
                    },
                    "ResearchProject.ECApprovalCode": {
                        required: "กรุณาระบุรหัส EC"
                    },
                    "ResearchProject.ECApprovalDate": {
                        required: "กรุณาระบุวันที่อนุมัติ EC"
                    },
                    "ResearchProject.ECExpirationDate": {
                        required: "กรุณาระบุวันหมดอายุ EC",
                        dateCheck: "วันหมดอายุ EC ต้องมากกว่าหรือเท่ากับวันที่อนุมัติ EC"
                    },
                    "ResearchProject.ResearchApprovalDate": {
                        required: "กรุณาระบุวันที่อนุมัติ (ขอเข้าเก็บข้อมูล)"
                    },
                    "ResearchProject.ResearchExpirationDate": {
                        required: "กรุณาระบุวันหมดอายุ (ขอเข้าเก็บข้อมูล)",
                        dateCheck: "วันหมดอายุต้องมากกว่าหรือเท่ากับวันที่อนุมัติ"
                    }
                },
                errorPlacement: function(error, element) {
                    if (element.hasClass("js-example-basic-single")) {
                        error.insertAfter(element.next(".select2-container"));
                    } else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function(form) {
                    // ตรวจสอบว่ามีอย่างน้อยหนึ่งไฟล์ถูกอัปโหลด
                    $("#saveBtn").prop("disabled", true).html('<i class="fas fa-spinner fa-spin"></i> กำลังบันทึก...');
                    form.submit();
                }
            });

            // เชื่อมต่อ Select2 กับ Validation
            $(".js-example-basic-single").on("change", function() {
                $(this).valid();
            });
        });

        $(document).on("change", ".type_ec", function () {
            let selectedValue = $(this).val(); // ดึงค่าจาก dropdown

            if (selectedValue == "1") {
                $(".date_ec").prop("disabled", true).val(''); // disabled และ clear ข้อมูล
            } else {
                $(".date_ec").prop("disabled", false);
            }

        });

        // ตัวนับ index ของผู้วิจัยร่วม
        let assistantIndex = 0;

        // ฟังก์ชัน เพิ่มผู้วิจัยร่วม (Append แถวใหม่)
        function addAssistant() {
            let html = `
                <tr id="assistant_${assistantIndex}">
                    <td>
                        <select class="form-control researcherSelect js-example-basic-single"
                                 name="ResearchAssistants[${assistantIndex}].ResearcherNumber"
                                style="width: 100%;">
                            <option value="">-- เลือกนักวิจัย --</option>
                            @foreach (var item in Model.HeadResearcherList)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </td>
                    <td><input type="text" class="form-control assistantWorkgroup" disabled /></td>
                    <td><input type="text" class="form-control assistantFaculty" disabled /></td>
                    <td><input type="text" class="form-control assistantType" disabled /></td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeAssistant(${assistantIndex})">ลบ</button>
                    </td>
                </tr>
            `;

            // ใส่แถวลงใน table
            $("#assistantTable tbody").append(html);

            // re-initialize Select2 กับ select ตัวใหม่
            $("#assistant_" + assistantIndex).find(".js-example-basic-single").select2({
                placeholder: "-- เลือกนักวิจัย --",
                allowClear: true,
                width: '100%'
            });

            assistantIndex++;
        }

        // ลบผู้วิจัยร่วม
        function removeAssistant(index) {
            $("#assistant_" + index).remove();
        }

        $(document).ready(function () {
            // Select2 กับ select หัวหน้าโครงการ
          // Select2 กับ select หัวหน้าโครงการ
    $('.js-example-basic-single').select2({
        placeholder: "-- เลือกหัวหน้าโครงการ --",
        allowClear: true,
        width: '100%'
    });

    // เมื่อเลือกหัวหน้าโครงการ ให้เรียก AJAX ไปเอาข้อมูลคณะมาแสดง
    $(document).on("change", ".headResearcher", function () {
        let researcherId = $(this).val();
        $.get("@Url.Action("GetResearcherDetails", "Research")", { researcherNumber: researcherId }, function (data) {
            $("#headWorkGroup").val(data.Work_groups == "-" ? data.OtherInfo : data.Work_groups + " " + (data.StatusWork_groups == 2 ? "(ยกเลิก)" : ""));
            $("#headDepartment").val(data ? data.Divisions + " " + (data.StatusDivisions == 2 ? "(ยกเลิก)" : "") : "ไม่พบข้อมูล");
            $("#headDivition").val(data ? data.TypeResearch : "ไม่พบข้อมูล");
            console.log("data :", data);
        });
    });


            // เมื่อเลือกผู้วิจัยร่วม ให้เรียก AJAX ไปเอาข้อมูลคณะและประเภทวิจัย
            $(document).on("change", ".researcherSelect", function () {
                let selectedResearcher = $(this).val();
                let row = $(this).closest("tr");

                $.get("@Url.Action("GetResearcherDetails", "Research")", { researcherNumber: selectedResearcher }, function (data) {
                    row.find(".assistantWorkgroup").val(data.Work_groups == "-" ? data.OtherInfo : data.Work_groups);
                    row.find(".assistantFaculty").val(data ? data.Faculty : "ไม่พบข้อมูล");
                    //row.find(".assistantDivisions").val(data ? data.Divisions : "ไม่พบข้อมูล");
                    row.find(".assistantType").val(data ? data.TypeResearch : "ไม่พบข้อมูล");
                });
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            flatpickr("#RequestDate", {
                locale: "th", // ใช้ภาษาไทย
                dateFormat: "d/m/Y",
                altInput: true,
                altFormat: "d/m/Y",
                allowInput: true,

                // แปลงวันที่ใน input เป็น พ.ศ.
                formatDate: function (date, format, locale) {
                    const day = ("0" + date.getDate()).slice(-2);
                    const month = ("0" + (date.getMonth() + 1)).slice(-2);
                    const thaiYear = date.getFullYear() + 543;
                    return `${day}/${month}/${thaiYear}`;
                },

                // แปลงค่ากลับเป็น ค.ศ. ก่อนบันทึก
                parseDate: function (dateStr, format) {
                    const parts = dateStr.split("/");
                    if (parts.length === 3) {
                        let day = parseInt(parts[0], 10);
                        let month = parseInt(parts[1], 10) - 1;
                        let year = parseInt(parts[2], 10) - 543;
                        return new Date(year, month, day);
                    }
                    return new Date();
                },

                onOpen: function (selectedDates, dateStr, instance) {
                    // ให้แน่ใจว่าปฏิทินแสดงเดือนปี พ.ศ. เสมอเมื่อเปิด
                    setTimeout(() => {
                        updateThaiYear(instance);

                        // กำหนดให้ปฏิทินแสดงเดือนปีปัจจุบัน ถ้าไม่มีวันที่ถูกเลือก
                        if (!instance.selectedDates || instance.selectedDates.length === 0) {
                            const today = new Date();
                            instance.currentYear = today.getFullYear();
                            instance.currentMonth = today.getMonth();
                            instance.redraw();
                            updateThaiYear(instance);
                        }
                    }, 10);
                },

                onYearChange: function (selectedDates, dateStr, instance) {
                    setTimeout(() => {
                        updateThaiYear(instance);
                        syncCalendarWithInput(instance);
                    }, 10);
                },

                onMonthChange: function (selectedDates, dateStr, instance) {
                    setTimeout(() => updateThaiYear(instance), 10);
                },

                onReady: function (selectedDates, dateStr, instance) {
                    setTimeout(() => {
                        updateThaiYear(instance);

                        // ให้สามารถพิมพ์ปี พ.ศ.
                        const yearInput = instance.calendarContainer.querySelector(".numInput.cur-year");
                        if (yearInput) {
                            yearInput.removeAttribute("readonly");
                            yearInput.addEventListener("input", function () {
                                let inputYear = parseInt(yearInput.value);
                                if (!isNaN(inputYear) && inputYear >= 2500) {
                                    let westernYear = inputYear - 543; // แปลงเป็น ค.ศ.
                                    instance.setDate(new Date(westernYear, instance.currentMonth, 1), false);
                                    instance.redraw();
                                    setTimeout(() => updateThaiYear(instance), 10);
                                }
                            });
                        }
                    }, 10);

                    if (selectedDates[0]) {
                        instance.altInput.value = instance.formatDate(selectedDates[0], "d/m/Y");
                    }
                },

                onChange: function (selectedDates, dateStr, instance) {
                    setTimeout(() => updateThaiYear(instance), 10);
                    if (selectedDates[0]) {
                        instance.altInput.value = instance.formatDate(selectedDates[0], "d/m/Y");
                    }
                },

                // เพิ่ม event handler สำหรับเมื่อปฏิทินถูกวาด/อัปเดตใหม่
                onDraw: function (selectedDates, dateStr, instance) {
                    setTimeout(() => updateThaiYear(instance), 10);
                }
            });

            // ฟังก์ชันอัปเดตปีเป็น พ.ศ. ในปฏิทิน
            function updateThaiYear(instance) {
                setTimeout(() => {
                    const yearInput = instance.calendarContainer.querySelector(".numInput.cur-year");
                    if (yearInput) {
                        let currentYear = parseInt(yearInput.value);
                        if (!isNaN(currentYear) && currentYear < 2500) {
                            yearInput.value = currentYear + 543;
                        }
                    }

                    // ตรวจจับปุ่ม `+` และ `-`
                    const upButton = instance.calendarContainer.querySelector(".arrowUp");
                    const downButton = instance.calendarContainer.querySelector(".arrowDown");

                    if (upButton && downButton) {
                        upButton.onclick = function () {
                            // เพิ่มปี ค.ศ.
                            let gregorianYear = parseInt(yearInput.value) - 543 + 1;
                            let thaiYear = gregorianYear + 543;
                            yearInput.value = thaiYear;

                            // อัปเดตวันที่ทั้งในปฏิทินและ input
                            let currentDate = instance.selectedDates[0] || new Date();
                            let newDate = new Date(gregorianYear, currentDate.getMonth(), 1);
                            instance.setDate(newDate, true);

                            setTimeout(() => {
                                updateThaiYear(instance);
                                syncInputWithCalendar(instance);
                            }, 10);
                        };

                        downButton.onclick = function () {
                            // ลดปี ค.ศ.
                            let gregorianYear = parseInt(yearInput.value) - 543 - 1;
                            let thaiYear = gregorianYear + 543;
                            yearInput.value = thaiYear;

                            // อัปเดตวันที่ทั้งในปฏิทินและ input
                            let currentDate = instance.selectedDates[0] || new Date();
                            let newDate = new Date(gregorianYear, currentDate.getMonth(), 1);
                            instance.setDate(newDate, true);

                            setTimeout(() => {
                                updateThaiYear(instance);
                                syncInputWithCalendar(instance);
                            }, 10);
                        };
                    }

                    // อัปเดต dropdown ปีให้เป็น พ.ศ.
                    const yearDropdown = instance.calendarContainer.querySelectorAll(".flatpickr-current-year");
                    yearDropdown.forEach(el => {
                        let yearNum = parseInt(el.innerText);
                        if (!isNaN(yearNum) && yearNum < 2500) {
                            el.innerText = (yearNum + 543).toString();
                        }
                    });
                }, 10);
            }

            // ฟังก์ชันทำให้ input อัปเดตปีตรงกับปฏิทิน
            function syncInputWithCalendar(instance) {
                let selectedDate = instance.selectedDates[0];
                if (selectedDate) {
                    // อัปเดต input ให้ตรงกับปฏิทิน
                    instance.altInput.value = instance.formatDate(selectedDate, "d/m/Y");
                }
            }

            // ฟังก์ชันทำให้ปฏิทินอัปเดตปีตรงกับ input
            function syncCalendarWithInput(instance) {
                let selectedDate = instance.selectedDates[0];
                if (selectedDate) {
                    // อัปเดตปฏิทินให้ตรงกับ input
                    instance.jumpToDate(selectedDate, true);
                    setTimeout(() => updateThaiYear(instance), 10);
                }
            }

            // ถ้ามีการคลิกที่ input โดยตรง (แม้ว่าจะไม่เลือกวัน)
            document.querySelector("#RequestDate").addEventListener("click", function () {
                const fpInstance = document.querySelector("#RequestDate")._flatpickr;
                if (fpInstance) {
                    setTimeout(() => updateThaiYear(fpInstance), 50);
                }
            });
        });

        $(document).ready(function () {
            // Existing validation code...

            // Custom validation for file upload
            $.validator.addMethod("fileTypeAndSize", function (value, element) {
                var files = $(element).get(0).files;
                if (files.length === 0) return true; // No files selected is allowed

                var maxSize = 5 * 1024 * 1024; // 5MB in bytes
                var validTypes = ["application/pdf"]; // Only allow PDF

                for (var i = 0; i < files.length; i++) {
                    if (!validTypes.includes(files[i].type) || files[i].size > maxSize) {
                        return false;
                    }
                }
                return true;
            }, "กรุณาอัปโหลดไฟล์ PDF เท่านั้น และขนาดไฟล์ต้องไม่เกิน 5MB");

            // Add rule to the form validation
            $("form").validate({
                // Existing rules...
                rules: {
                    "files": {
                        fileTypeAndSize: true
                    },
                    // Existing rules...
                },
                // Existing settings...
            });

            // Prevent form submission if file validation fails
            $("#saveBtn").on("click", function (e) {
                if (!$("form").valid()) {
                    e.preventDefault();
                    return;
                }
                $(this).prop("disabled", true).html('<i class="fas fa-spinner fa-spin"></i> กำลังบันทึก...');
                $("form").submit();
            });
        });


    </script>
}
